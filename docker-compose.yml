version: '3.9'

services:
  web:
    build: .
    restart: always
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4
      "

  db:
    image: postgres:15
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/generate_conf.sh:/docker-entrypoint.d/generate_conf.sh
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./certbot/www:/var/www/certbot  # shared volume for ACME challenges
    environment:
      - DOMAIN=${DOMAIN}

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c"
    command: >
      "certbot certonly --webroot -w /var/www/certbot
      --email ${EMAIL} --agree-tos --no-eff-email
      -d ${DOMAIN} -d www.${DOMAIN} --non-interactive"

volumes:
  static_volume:
  media_volume:
  certbot-etc:
  certbot-var:
  postgres_data:
